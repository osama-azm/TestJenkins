pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'osamaazm/shipr-payment'
        TAG = 'latest'
        DOCKER_IMAGE_CONSUMER = 'osamaazm/shipr-payment-consumer'
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build the Docker image from')
    }
    stages {
        stage('Checkout Code') {
            steps {
                echo "Checking out code from branch: ${params.BRANCH_NAME}..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${params.BRANCH_NAME}"]],
                    userRemoteConfigs: [[url: 'https://github.com/osama-azm/TestJenkins.git']]
                ])
            }
        }
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    sh """
                    docker build -t ${DOCKER_IMAGE}:${TAG} -f ./shipr-payment/Dockerfile ./shipr-payment
                    docker build -t ${DOCKER_IMAGE_CONSUMER}:${TAG} -f ./shipr-payment/Dockerfile.consumer ./shipr-payment
                    """
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                echo 'Logging in to Docker Hub...'
                script {
                    withCredentials([string(credentialsId: 'osamaazm', variable: 'osamaazm')]) {
                            sh 'docker login -u osamaazm -p ${osamaazm}'
                        }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image...'
                script {
                    sh """
                    docker push ${DOCKER_IMAGE}:${TAG}
                    docker push ${DOCKER_IMAGE_CONSUMER}:${TAG}
                    """
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up Docker images...'
            sh 'docker rmi ${DOCKER_IMAGE}:${TAG} || true'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
