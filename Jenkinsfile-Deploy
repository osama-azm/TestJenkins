pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: jnlp
                image: jenkins/inbound-agent:latest
                args: ['\$(JENKINS_SECRET)', '\$(JENKINS_AGENT_NAME)']
              - name: kubectl
                image: bitnami/kubectl:latest
                command:
                - cat
                tty: true
              - name: helm
                image: alpine/helm:latest
                command:
                - cat
                tty: true
            """
        }
    }

    environment {
        KUBECONFIG = '/var/jenkins_home/.kube/config' // Path to the kubeconfig file
        CLUSTER_CONTEXT = 'minikube'                 // Minikube context
        NAMESPACE = 'shipr-namespace'               // Kubernetes namespace
        RELEASE_NAME = 'shipr-release'              // Helm release name
        HELM_CHART_PATH = './Shipr-Helm'            // Path to Helm chart
    }

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Branch to build the application from')
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Checking out code from branch: ${params.BRANCH_NAME}..."
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${params.BRANCH_NAME}"]],
                    userRemoteConfigs: [[url: 'https://github.com/osama-azm/TestJenkins.git']]
                ])
            }
        }

        stage('Update kubeconfig for Minikube') {
            steps {
                container('kubectl') {
                    echo 'Updating kubeconfig to use Minikube...'
                    sh """
                    export KUBECONFIG=${KUBECONFIG}
                    kubectl config use-context ${CLUSTER_CONTEXT}
                    """
                }
            }
        }

        stage('Deploy Helm Chart') {
            steps {
                container('helm') {
                    echo "Deploying Helm chart: ${HELM_CHART_PATH} in namespace: ${NAMESPACE}..."
                    sh """
                    helm upgrade --install ${RELEASE_NAME} ${HELM_CHART_PATH} \
                        --namespace ${NAMESPACE} --create-namespace
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up temporary resources...'
        }
        success {
            echo 'Deployment to Minikube successful!'
        }
        failure {
            echo 'Deployment to Minikube failed. Check the logs for details.'
        }
    }
}
